name: build

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'doc/**'
      - 'README*'
      - '.github/**'
  workflow_dispatch:

jobs:
  check_release:
     name: Check for Release
     runs-on: ubuntu-latest
     outputs:
       should_release: ${{ steps.whether_release.outputs.should_release }}
     steps:
       - name: 'Debug: Print commit message'
         run: echo "Commit message is '${{ github.event.head_commit.message }}'"

       - name: Determine whether to release
         id: whether_release
         run: |
           COMMIT_MSG="${{ github.event.head_commit.message }}"
           SHOULD_RELEASE="false"

           if [[ "$COMMIT_MSG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
             echo "✅ Commit message matches release pattern."
             SHOULD_RELEASE="true"
           else
             echo "❌ Commit message does NOT match release pattern."
           fi

           echo "should_release=${SHOULD_RELEASE}" >> $GITHUB_OUTPUT
           echo "Final output value is: '${SHOULD_RELEASE}'"
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]

    steps:
      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64

      - name: Clean up (macOS(ARM64))
        if: matrix.os == 'macOS(ARM64)'
        run: rm -rf *

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install autoconf automake libtool pkg-config xz

      - name: Set environment variables according to CPU type
        if: matrix.os == 'macOS(ARM64)' || runner.os == 'macOS'
        shell: bash
        run: |
          if [[ "$(uname -m)" == "arm64" ]]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi
          echo "CFLAGS=-I${HOMEBREW_PREFIX}/include" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${HOMEBREW_PREFIX}/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L${HOMEBREW_PREFIX}/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${HOMEBREW_PREFIX}/lib/pkgconfig" >> $GITHUB_ENV

      - name: install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get install liblzma-dev libreadline-dev

      - name: Compile core files (Unix)
        if: runner.os != 'Windows'
        run: sh ./compile.sh

      - name: Compile core files (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: sh ./compile.sh

      # 指定使用兼容版本的 python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile GUI
        env:
          NFCTOOLSGUI_COMPILER: "Github Actions"
        run: npm run make

      - name: Find output files (Unix)
        if: runner.os != 'Windows'
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "output_files<<$EOF" >> $GITHUB_ENV
          find out/make/zip -name "*.zip" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Find output files (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "output_files<<$EOF" >> $GITHUB_ENV
          find out/make/zip -name "*.zip" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: NFCToolsGUI-${{ runner.os }}-${{ runner.arch }}
          path: ${{ env.output_files }}

  release:
    name: Release
    needs: [build, check_release]
    if: success() && needs.check_release.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4

      - name: Find zip files
        id: find-zip-files
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "articact_files<<$EOF" >> $GITHUB_ENV
          find . -name "*.zip" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.head_commit.message }}
          files: ${{ env.articact_files }}
          generate_release_notes: true
          prerelease: true

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: '*'
          failOnError: false
